int seed;

// retorna o resto da divis√£o de n por k
fn mod(int n, int k){
    return n - (n/k*k);
}

fn rand()
{
    int m, x;
    m = 255;
    seed = 1103515245 * seed +  12345;
    if(seed<0){
        seed = -seed;
    }
    seed = mod(seed, 255);
    return seed;
}

fn fill_rand(ptr arr, int n){
    while(n>0){
        n = n-1;
        arr[n] = rand();
    }
}

fn swap(ptr a, ptr b){
    int t;
    t = *a;
    *a = *b;
    *b = t;
}

// Partition function
fn partition(ptr arr, int low, int high) {
    int pivot, i, j;
    
    // Choose the pivot
    pivot = arr[high];
    
    // Index of smaller element and indicates 
    // the right position of pivot found so far
    i = low - 1;

    // Traverse arr[low..high] and move all smaller
    // elements to the left side. Elements from low to 
    // i are smaller after every iteration
    j = low;
    while(j<=high){
        if (arr[j] < pivot) {
            i=i+1;
            swap(&arr[i], &arr[j]);
        }
        j = j+1;
    }
    
    // Move pivot after smaller elements and
    // return its position
    swap(&arr[i + 1], &arr[high]);  
    return i + 1;
}

// The QuickSort function implementation
fn quickSort(ptr arr, int low, int high) {
    int pi;
    if (low < high) {
        
        // pi is the partition return index of pivot
        pi = partition(arr, low, high);

        // Recursion calls for smaller elements
        // and greater or equals elements
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}


fn main(){
    int arr[100], n, i;

    seed = 0;
    n = 100;
    fill_rand(arr, n);

    quickSort(arr, 0, n - 1);
    i=0;
    while(i<n){
        print(arr[i]);
        i=i+1;
    }
}