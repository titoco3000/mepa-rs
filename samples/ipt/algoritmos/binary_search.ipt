// Código adaptado de: https://www.geeksforgeeks.org/binary-search/
int seed;

// retorna o resto da divisão de n por k
fn mod(int n, int k){
    return n - (n/k*k);
}

fn rand()
{
    int m, x;
    m = 255;
    seed = 1103515245 * seed +  12345;
    if(seed<0){
        seed = -seed;
    }
    seed = mod(seed, 255);
    return seed;
}

fn fill_increasing(ptr arr, int n){    
    int i;
    arr[0] = 0;
    i = 1;
    while(i<n){
        arr[i] = arr[i-1]+mod(rand(),10);
        i = i+1;
    }
}

fn print_arr(ptr arr, int n){
    int i;
    i = 0;
    while(i<n){
        print(arr[i]);
        i = i+1;
    }
}


fn binarySearch(ptr arr, int low, int high, int x)
{
    int mid;
    int result;

    result = -1;
    if (high >= low) {
        mid = low + (high - low) / 2;

        // If the element is present at the middle
        // itself
        if (arr[mid] == x)
            result = mid;

        // If element is smaller than mid, then
        // it can only be present in left subarray
        else if (arr[mid] > x)
            result = binarySearch(arr, low, mid - 1, x);
        
        // Else the element can only be present
        // in right subarray
        else
            result = binarySearch(arr, mid + 1, high, x);
    }

    return result;
}

fn main(){
    int arr[10], x;
    
    seed = 0;
    fill_increasing(arr, 10);
    print_arr(arr,10);

    x = 27; //item buscado
    x = binarySearch(arr, 0, 5 - 1, x);
    print(x);
}