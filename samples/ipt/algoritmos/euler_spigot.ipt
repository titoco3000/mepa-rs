// Imprime os primeiros 100 digitos da constante e.
// Para calcular eles, usa o algorítmo de spigot.
// Inspirado no vídeo: Computing Pi on the NES (NesHacker, https://www.youtube.com/watch?v=nleB7uPtQxQ&t=400s)
// Que por sua vez usa: Pi-Spigot Algorithm Paper (Rabinowitz & Wagon, 1995)

fn preencher(ptr arr, int n, int val) {
    while(n > 0) {
        n = n - 1;
        arr[n] = val;
    }
}

// retorna o resto da divisão de n por k
fn mod(int n, int k){
    return n - (n/k*k);
}

fn spigot(ptr a, int sa) {
    int i, q, r;
    //multiplica todo o vetor por 10
    i = 0;
    while(i<sa){
        a[i] = a[i] * 10;
        i=i+1;
    }

    //do ultimo ao primeiro elemento do vetor (dir à esq)
    i = sa-1;
    while(i>0){
        //+2 proque a fração que cada posição representa começa a partir do 2. O index 0
        //representa 1/2, index 1 1/3, etc
        q = a[i] / (i + 2);
        r = mod(a[i], (i + 2));
        a[i - 1] = a[i - 1]+q; // item à esq = quociente
        a[i] = r; // atual = resto
        i=i-1;        
    }

    q = a[0] / 2;
    r = mod(a[0], 2);
    a[0] = r;
    
    print(q);
}


fn main(){
    int arr[100], n, i;    
    n = 100;

    preencher(arr,n,1);

    print(2);

    i = n;
    while(i>0){
        i=i-1;
        spigot(arr, n);
    }
}